// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using SamplesRequest.Models.Models.DAL.DBContext;
using System;

namespace SamplesRequest.Models.Migrations
{
    [DbContext(typeof(SamplesRequestDBContext))]
    partial class SamplesRequestDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SamplesRequest.Models.Models.Entities.Address", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<int>("client_id");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("facility")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("state")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("street_number")
                        .IsRequired()
                        .HasColumnType("varchar(60)");

                    b.Property<string>("zip")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.HasKey("id");

                    b.HasIndex("client_id");

                    b.ToTable("addresses");
                });

            modelBuilder.Entity("SamplesRequest.Models.Models.Entities.Catalog", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("key")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("name")
                        .HasColumnType("varchar(50)");

                    b.HasKey("id");

                    b.ToTable("catalogs");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Catalog");
                });

            modelBuilder.Entity("SamplesRequest.Models.Models.Entities.Client", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("name")
                        .HasColumnType("varchar(50)");

                    b.HasKey("id");

                    b.ToTable("clients");
                });

            modelBuilder.Entity("SamplesRequest.Models.Models.Entities.RequestWorkflowStep", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("approved_by");

                    b.Property<DateTime?>("approved_date");

                    b.Property<string>("comments")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("order_workflow_step");

                    b.Property<string>("primary_responsible_id")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("sample_request_id");

                    b.Property<string>("secondary_responsible_id")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("workflow_step_id");

                    b.Property<string>("workflow_step_name")
                        .HasColumnType("varchar(50)");

                    b.HasKey("id");

                    b.HasIndex("primary_responsible_id");

                    b.HasIndex("sample_request_id");

                    b.HasIndex("secondary_responsible_id");

                    b.HasIndex("workflow_step_id");

                    b.ToTable("request_workflow_steps");
                });

            modelBuilder.Entity("SamplesRequest.Models.Models.Entities.SampleRequest", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("address_id");

                    b.Property<string>("comments")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("created_at");

                    b.Property<int>("created_by");

                    b.Property<string>("objective")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("project_name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("require_test");

                    b.Property<int>("sample_priority_id");

                    b.Property<int>("sample_purpose_id");

                    b.HasKey("id");

                    b.HasIndex("address_id");

                    b.HasIndex("sample_priority_id");

                    b.HasIndex("sample_purpose_id");

                    b.ToTable("sample_requests");
                });

            modelBuilder.Entity("SamplesRequest.Models.Models.Entities.SampleRequestDetail", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("model_number")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<int>("quantity");

                    b.Property<int>("request_id");

                    b.Property<string>("specs")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.HasKey("id");

                    b.HasIndex("request_id");

                    b.ToTable("sample_request_details");
                });

            modelBuilder.Entity("SamplesRequest.Models.Models.Entities.User", b =>
                {
                    b.Property<string>("uname")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("varchar(60)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("uname");

                    b.ToTable("users");
                });

            modelBuilder.Entity("SamplesRequest.Models.Models.Entities.WorkflowStep", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("description")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("only_if_lab_test");

                    b.Property<int>("order");

                    b.HasKey("id");

                    b.ToTable("workflow_steps");
                });

            modelBuilder.Entity("SamplesRequest.Models.Models.Entities.WorkflowUser", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("primary_responsible_id")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("primary_responsible_name")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("secondary_responsible_id")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("secondary_responsible_name")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("secundary_responsible_id");

                    b.Property<int>("workflow_step_id");

                    b.HasKey("id");

                    b.HasIndex("primary_responsible_id");

                    b.HasIndex("secundary_responsible_id");

                    b.HasIndex("workflow_step_id");

                    b.ToTable("workflow_users");
                });

            modelBuilder.Entity("SamplesRequest.Models.Models.Entities.SamplePriority", b =>
                {
                    b.HasBaseType("SamplesRequest.Models.Models.Entities.Catalog");


                    b.ToTable("catalogs");

                    b.HasDiscriminator().HasValue("SamplePriority");
                });

            modelBuilder.Entity("SamplesRequest.Models.Models.Entities.SamplePurpose", b =>
                {
                    b.HasBaseType("SamplesRequest.Models.Models.Entities.Catalog");


                    b.ToTable("catalogs");

                    b.HasDiscriminator().HasValue("SamplePurpose");
                });

            modelBuilder.Entity("SamplesRequest.Models.Models.Entities.Address", b =>
                {
                    b.HasOne("SamplesRequest.Models.Models.Entities.Client", "client")
                        .WithMany("addresses")
                        .HasForeignKey("client_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SamplesRequest.Models.Models.Entities.RequestWorkflowStep", b =>
                {
                    b.HasOne("SamplesRequest.Models.Models.Entities.User", "primary_responsible")
                        .WithMany()
                        .HasForeignKey("primary_responsible_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SamplesRequest.Models.Models.Entities.SampleRequest", "sample_request")
                        .WithMany("request_workflow_steps")
                        .HasForeignKey("sample_request_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SamplesRequest.Models.Models.Entities.User", "secondary_responsible")
                        .WithMany()
                        .HasForeignKey("secondary_responsible_id");

                    b.HasOne("SamplesRequest.Models.Models.Entities.WorkflowStep", "Workflow_step")
                        .WithMany()
                        .HasForeignKey("workflow_step_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SamplesRequest.Models.Models.Entities.SampleRequest", b =>
                {
                    b.HasOne("SamplesRequest.Models.Models.Entities.Address", "address")
                        .WithMany()
                        .HasForeignKey("address_id");

                    b.HasOne("SamplesRequest.Models.Models.Entities.SamplePriority", "priority")
                        .WithMany("sample_requests")
                        .HasForeignKey("sample_priority_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SamplesRequest.Models.Models.Entities.SamplePurpose", "purpose")
                        .WithMany("sample_requests")
                        .HasForeignKey("sample_purpose_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SamplesRequest.Models.Models.Entities.SampleRequestDetail", b =>
                {
                    b.HasOne("SamplesRequest.Models.Models.Entities.SampleRequest", "request")
                        .WithMany("sample_request_details")
                        .HasForeignKey("request_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SamplesRequest.Models.Models.Entities.WorkflowUser", b =>
                {
                    b.HasOne("SamplesRequest.Models.Models.Entities.User", "primary_responsible")
                        .WithMany()
                        .HasForeignKey("primary_responsible_id");

                    b.HasOne("SamplesRequest.Models.Models.Entities.User", "secondary_responsible")
                        .WithMany()
                        .HasForeignKey("secundary_responsible_id");

                    b.HasOne("SamplesRequest.Models.Models.Entities.WorkflowStep", "workflow_step")
                        .WithMany("responsibles")
                        .HasForeignKey("workflow_step_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
